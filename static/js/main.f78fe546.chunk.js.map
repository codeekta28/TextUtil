{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","cursorPointer","cursor","className","mode","to","websiteTitle","type","id","aboutSection","role","onClick","onModeChange","htmlFor","modeBtnText","showDarkModeColor","blueColor","style","redColor","greenColor","yellowColor","TextForm","useState","textValue","settextValue","btnColor","backgroundColor","darkModeColor","color","border","textAreaStyle","heading","rows","value","onChange","event","target","toUpperCase","showAlert","toLowerCase","split","reverse","join","newText","newArray","console","log","i","length","push","slice","replace","Alert","str","msg","About","bgColor","App","setMode","setModeBtnText","alert","setAlert","setDarkModeColor","message","setTimeout","document","body","title","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f78fe546.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar (props) {\r\n  const cursorPointer={\r\n    cursor:'pointer'\r\n  }\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className='container-fluid'>\r\n          <Link className='navbar-brand' to='/'>\r\n            {props.websiteTitle}\r\n          </Link>\r\n          <button\r\n            className='navbar-toggler'\r\n            type='button'\r\n            data-bs-toggle='collapse'\r\n            data-bs-target='#navbarSupportedContent'\r\n            aria-controls='navbarSupportedContent'\r\n            aria-expanded='false'\r\n            aria-label='Toggle navigation'\r\n          >\r\n            <span className='navbar-toggler-icon'></span>\r\n          </button>\r\n          <div className='collapse navbar-collapse' id='navbarSupportedContent'>\r\n            <ul className='navbar-nav me-auto mb-2 mb-lg-0'>\r\n              <li className='nav-item'>\r\n                <Link className='nav-link active' aria-current='page' to='/'>\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <Link className='nav-link' to='/about'>\r\n                  {props.aboutSection}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            <div className='form-check form-switch'>\r\n              <input\r\n                className='form-check-input'\r\n                type='checkbox'\r\n                role='switch'\r\n                id='flexSwitchCheckDefault'\r\n                onClick={props.onModeChange}\r\n              />\r\n              <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor='flexSwitchCheckDefault'>\r\n             {props.modeBtnText}\r\n              </label>\r\n            </div>\r\n            <div className=\"blue p-3  bg-primary border border-primary ms-2 rounded-circle d\" onClick={props.showDarkModeColor.blueColor} style={cursorPointer}/>\r\n          <div className=\"red p-3  bg-danger border border-danger mx-2 rounded-circle d\"onClick={props.showDarkModeColor.redColor}  style={cursorPointer}/>\r\n          <div className=\"green p-3  bg-success border border-success me-2 rounded-circle d\"onClick={props.showDarkModeColor.greenColor} style={cursorPointer}/>\r\n          <div className=\"yellow p-3  bg-warning border border-warning rounded-circle d\"onClick={props.showDarkModeColor.yellowColor} style={cursorPointer}/>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  websiteTitle: PropTypes.string.isRequired,\r\n  aboutSection: PropTypes.string.isRequired\r\n}\r\n// Navbar.defaultProps = {\r\n//   websiteTitle: 'Logo',\r\n//   aboutSection: 'About Us'\r\n// }\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm (props) {\r\n\r\n  const [textValue, settextValue] = useState('')\r\n  // btn styles\r\n  const btnColor={\r\n    backgroundColor:props.darkModeColor,\r\n    color:'white',\r\n    border:'1px solid white'\r\n  }\r\n  const textAreaStyle={\r\n    backgroundColor:props.darkModeColor,\r\n    color:'white',\r\n    border:'3px solid white'\r\n  }\r\n\r\n  // Event functions\r\n  const textInputHandler = event => {\r\n    settextValue(event.target.value)\r\n  }\r\n  const changeUpperCaseHandler = () => {\r\n    settextValue(textValue.toUpperCase())\r\n    props.showAlert('success',\"Changed To UpperCase\")\r\n\r\n  }\r\n  const changeLowerCaseHandler = () => {\r\n    settextValue(textValue.toLowerCase())\r\n    props.showAlert('success',\"Changed To LowerCase\")\r\n  }\r\n  const reverseTextHandler=()=>{\r\n   settextValue(textValue.split(' ').reverse().join(' '))\r\n   props.showAlert('success',\"Changed To Reverse Text\")\r\n  }\r\n  const capitalizeTextHandler=()=>{\r\n    let newText=textValue;\r\n    let newArray=[];\r\n    newText=newText.split(' ');\r\n    console.log(newText);\r\n    for (let i = 0; i < newText.length; i++) {\r\n      newArray.push(newText[i][0].toUpperCase()+newText[i].slice(1)); \r\n    }\r\n    settextValue(newArray.join(' '))\r\n    props.showAlert('success',\"Changed To Capitalize\")\r\n  }\r\n  const removeSpaceHandler=()=>{\r\n    let reg=/( )+/g;\r\n    settextValue(textValue.replace(reg,\" \"));\r\n    props.showAlert('success',\"Extra spaces removed\")\r\n  }\r\n  const parameterizingTextHandler=()=>{\r\n    settextValue(textValue.split(' ').join('-'))\r\n    props.showAlert('success',\"Text parameterized\")\r\n  }\r\n  const clearTextAreaHandler = () => {\r\n    settextValue('')\r\n  }\r\n\r\n  return (\r\n    <section id=\"textForm\" >\r\n      <section id=\"formContainer\" className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n \r\n        <div className='container my-5'>\r\n          <h1 className='text-capitalize '>{props.heading}</h1>\r\n\r\n          <div className='mb-3'>\r\n            <textarea\r\n              className=\"form-control\"\r\n              style={textAreaStyle}\r\n              id='exampleFormControlTextarea1'\r\n              rows='8'\r\n              value={textValue}\r\n              onChange={textInputHandler}\r\n            ></textarea>\r\n          </div>\r\n          <button className='btn' style={btnColor} onClick={changeUpperCaseHandler}>\r\n            Convert To Uppercase\r\n          </button>\r\n          <button\r\n            className='btn btn-primary mx-2'\r\n            onClick={changeLowerCaseHandler}\r\n            style={btnColor} \r\n          >\r\n            Convert To lowerCase\r\n          </button>\r\n          <button\r\n            className='btn btn-danger mx-1'\r\n            onClick={clearTextAreaHandler}\r\n            style={btnColor} \r\n          >\r\n            Clear TextArea\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={reverseTextHandler}>\r\n          Reverse Text\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={capitalizeTextHandler}>\r\n        Capitalize Text\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={removeSpaceHandler}>\r\n        Remove Extra Space\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={parameterizingTextHandler}>\r\n        Parameterizing Text\r\n          </button>\r\n        </div>\r\n      </section>\r\n      <section id=\"formResult\" className={`text-${props.mode==='light'?'dark':'light'}`} >\r\n        <div className='container my-5'>\r\n          <h1>Text Summary</h1>\r\n          <p>\r\n            Chars=<b>{textValue.length}</b> Words=\r\n            <b>{textValue.split(' ').length - 1}</b>\r\n          </p>\r\n          <p>\r\n            <b>{(textValue.split(' ').length - 1) * 0.008}mins</b> time to read{' '}\r\n          </p>\r\n          {/* (Normally 125 words are read in 1 min so 1 word is read in 1/125 mins which is .008 so we divide number of words to 0.008) */}\r\n          <h2>Preview</h2>\r\n          <p>\r\n            <b>{textValue.length>0?textValue:\"Enter something in above box to preview it\"}</b>\r\n          </p>\r\n        </div>\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert (props) {\r\n    function capitalize(str){\r\n        return str[0].toUpperCase()+str.slice(1);\r\n    }\r\n  return (\r\n    props.showAlert&&<div className={`alert alert-${props.showAlert.type} alert-dismissible fade show`} role='alert'>\r\n      <strong>{capitalize(props.showAlert.type)}: {props.showAlert.msg}</strong> \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nfunction About(props) {\r\n   const bgColor={\r\n        backgroundColor:props.darkModeColor,\r\n        border:\"1px solid white\",\r\n    }\r\n    return (\r\n        <>\r\n        <h1 className=\"my-3 fw-bold mx-3\"> About Us</h1>\r\n<div className=\"accordion p-3\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\" style={bgColor}>\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={bgColor}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={bgColor}>\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={bgColor}>\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import './App.css'\nimport react, { useState } from 'react'\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert'\nimport { Routes, Route, Link } from 'react-router-dom'\nimport About from './components/About'\n\nfunction App () {\n  const [mode, setMode] = useState('light')\n  const [modeBtnText, setModeBtnText] = useState('Dark Mode')\n  const [alert, setAlert] = useState(null)\n  const [darkModeColor, setDarkModeColor] = useState('white')\n  const modeChangeHandler = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      setModeBtnText('Light Mode')\n      document.body.style.backgroundColor = '#151515'\n      document.body.style.color = 'white'\n      document.title = 'TextUtil-darkmodeOn'\n      //  below code can br written to make  title blinking but not a good user experience\n      // setInterval(() => {\n      //   document.title=\"TextUtil-Download now\"\n      // }, 1000);\n      // setInterval(() => {\n      //   document.title=\"TextUtil is a good app\"\n      // }, 1500);\n      setDarkModeColor('#151515')\n      showAlert('success', 'Dark Mode On')\n    } else {\n      setMode('light')\n      setModeBtnText('Dark Mode')\n      document.body.style.backgroundColor = 'white'\n      document.body.style.color = 'black'\n      document.title = 'TextUtil-LightMode'\n      setDarkModeColor('black')\n      showAlert('success', 'Light Mode On')\n    }\n  }\n  const showAlert = (type, message) => {\n    setAlert({\n      type: type,\n      msg: message\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000)\n  }\n  const showDarkModeColor = {\n    blueColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#061d3e'\n        setDarkModeColor('#0a4dac')\n      }\n    },\n    redColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#521616'\n        setDarkModeColor('#ba1818')\n      }\n    },\n    greenColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#063606'\n        setDarkModeColor('#0cae0c')\n      }\n    },\n    yellowColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#ce9d08'\n        setDarkModeColor('#f4c430')\n      }\n    }\n  }\n\n  return (\n    <>\n      <Navbar\n        websiteTitle={'TextUtiles'}\n        aboutSection={'About'}\n        mode={mode}\n        onModeChange={modeChangeHandler}\n        modeBtnText={modeBtnText}\n        showDarkModeColor={showDarkModeColor}\n      />\n      <Alert showAlert={alert} />\n      <Routes>\n        <Route path=\"/\" element={      <TextForm\n              heading={'Enter Your text below to analyze '}\n              mode={mode}\n              showAlert={showAlert}\n              darkModeColor={darkModeColor}\n            />} />\n                <Route path=\"about\" element={<About darkModeColor={darkModeColor}/>} />\n     \n      </Routes>\n\n\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}