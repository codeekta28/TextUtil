{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","cursorPointer","cursor","className","mode","href","websiteTitle","type","id","aboutSection","role","onClick","onModeChange","htmlFor","modeBtnText","showDarkModeColor","blueColor","style","redColor","greenColor","yellowColor","TextForm","useState","textValue","settextValue","btnColor","backgroundColor","darkModeColor","color","border","textAreaStyle","heading","rows","value","onChange","event","target","toUpperCase","showAlert","toLowerCase","split","reverse","join","newText","newArray","console","log","i","length","push","slice","replace","Alert","str","msg","App","setMode","setModeBtnText","alert","setAlert","setDarkModeColor","message","setTimeout","document","body","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d13db717.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar (props) {\r\n  const cursorPointer={\r\n    cursor:'pointer'\r\n  }\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className='container-fluid'>\r\n          <a className='navbar-brand' href='#'>\r\n            {props.websiteTitle}\r\n          </a>\r\n          <button\r\n            className='navbar-toggler'\r\n            type='button'\r\n            data-bs-toggle='collapse'\r\n            data-bs-target='#navbarSupportedContent'\r\n            aria-controls='navbarSupportedContent'\r\n            aria-expanded='false'\r\n            aria-label='Toggle navigation'\r\n          >\r\n            <span className='navbar-toggler-icon'></span>\r\n          </button>\r\n          <div className='collapse navbar-collapse' id='navbarSupportedContent'>\r\n            <ul className='navbar-nav me-auto mb-2 mb-lg-0'>\r\n              <li className='nav-item'>\r\n                <a className='nav-link active' aria-current='page' href='#'>\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className='nav-item'>\r\n                <a className='nav-link' href='#'>\r\n                  {props.aboutSection}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className='form-check form-switch'>\r\n              <input\r\n                className='form-check-input'\r\n                type='checkbox'\r\n                role='switch'\r\n                id='flexSwitchCheckDefault'\r\n                onClick={props.onModeChange}\r\n              />\r\n              <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor='flexSwitchCheckDefault'>\r\n             {props.modeBtnText}\r\n              </label>\r\n            </div>\r\n            <div className=\"blue p-3  bg-primary border border-primary ms-2 rounded-circle d\" onClick={props.showDarkModeColor.blueColor} style={cursorPointer}/>\r\n          <div className=\"red p-3  bg-danger border border-danger mx-2 rounded-circle d\"onClick={props.showDarkModeColor.redColor}  style={cursorPointer}/>\r\n          <div className=\"green p-3  bg-success border border-success me-2 rounded-circle d\"onClick={props.showDarkModeColor.greenColor} style={cursorPointer}/>\r\n          <div className=\"yellow p-3  bg-warning border border-warning rounded-circle d\"onClick={props.showDarkModeColor.yellowColor} style={cursorPointer}/>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  websiteTitle: PropTypes.string.isRequired,\r\n  aboutSection: PropTypes.string.isRequired\r\n}\r\n// Navbar.defaultProps = {\r\n//   websiteTitle: 'Logo',\r\n//   aboutSection: 'About Us'\r\n// }\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm (props) {\r\n\r\n  const [textValue, settextValue] = useState('')\r\n  // btn styles\r\n  const btnColor={\r\n    backgroundColor:props.darkModeColor,\r\n    color:'white',\r\n    border:'1px solid white'\r\n  }\r\n  const textAreaStyle={\r\n    backgroundColor:props.darkModeColor,\r\n    color:'white',\r\n    border:'3px solid white'\r\n  }\r\n\r\n  // Event functions\r\n  const textInputHandler = event => {\r\n    settextValue(event.target.value)\r\n  }\r\n  const changeUpperCaseHandler = () => {\r\n    settextValue(textValue.toUpperCase())\r\n    props.showAlert('success',\"Changed To UpperCase\")\r\n\r\n  }\r\n  const changeLowerCaseHandler = () => {\r\n    settextValue(textValue.toLowerCase())\r\n    props.showAlert('success',\"Changed To LowerCase\")\r\n  }\r\n  const reverseTextHandler=()=>{\r\n   settextValue(textValue.split(' ').reverse().join(' '))\r\n   props.showAlert('success',\"Changed To Reverse Text\")\r\n  }\r\n  const capitalizeTextHandler=()=>{\r\n    let newText=textValue;\r\n    let newArray=[];\r\n    newText=newText.split(' ');\r\n    console.log(newText);\r\n    for (let i = 0; i < newText.length; i++) {\r\n      newArray.push(newText[i][0].toUpperCase()+newText[i].slice(1)); \r\n    }\r\n    settextValue(newArray.join(' '))\r\n    props.showAlert('success',\"Changed To Capitalize\")\r\n  }\r\n  const removeSpaceHandler=()=>{\r\n    let reg=/( )+/g;\r\n    settextValue(textValue.replace(reg,\" \"));\r\n    props.showAlert('success',\"Extra spaces removed\")\r\n  }\r\n  const parameterizingTextHandler=()=>{\r\n    settextValue(textValue.split(' ').join('-'))\r\n    props.showAlert('success',\"Text parameterized\")\r\n  }\r\n  const clearTextAreaHandler = () => {\r\n    settextValue('')\r\n  }\r\n\r\n  return (\r\n    <section id=\"textForm\" >\r\n      <section id=\"formContainer\" className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n \r\n        <div className='container my-5'>\r\n          <h1 className='text-capitalize '>{props.heading}</h1>\r\n\r\n          <div className='mb-3'>\r\n            <textarea\r\n              className=\"form-control\"\r\n              style={textAreaStyle}\r\n              id='exampleFormControlTextarea1'\r\n              rows='8'\r\n              value={textValue}\r\n              onChange={textInputHandler}\r\n            ></textarea>\r\n          </div>\r\n          <button className='btn' style={btnColor} onClick={changeUpperCaseHandler}>\r\n            Convert To Uppercase\r\n          </button>\r\n          <button\r\n            className='btn btn-primary mx-2'\r\n            onClick={changeLowerCaseHandler}\r\n            style={btnColor} \r\n          >\r\n            Convert To lowerCase\r\n          </button>\r\n          <button\r\n            className='btn btn-danger mx-1'\r\n            onClick={clearTextAreaHandler}\r\n            style={btnColor} \r\n          >\r\n            Clear TextArea\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={reverseTextHandler}>\r\n          Reverse Text\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={capitalizeTextHandler}>\r\n        Capitalize Text\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={removeSpaceHandler}>\r\n        Remove Extra Space\r\n          </button>\r\n          <button className='btn btn-primary mx-1'style={btnColor}  onClick={parameterizingTextHandler}>\r\n        Parameterizing Text\r\n          </button>\r\n        </div>\r\n      </section>\r\n      <section id=\"formResult\" className={`text-${props.mode==='light'?'dark':'light'}`} >\r\n        <div className='container my-5'>\r\n          <h1>Text Summary</h1>\r\n          <p>\r\n            Chars=<b>{textValue.length}</b> Words=\r\n            <b>{textValue.split(' ').length - 1}</b>\r\n          </p>\r\n          <p>\r\n            <b>{(textValue.split(' ').length - 1) * 0.008}mins</b> time to read{' '}\r\n          </p>\r\n          {/* (Normally 125 words are read in 1 min so 1 word is read in 1/125 mins which is .008 so we divide number of words to 0.008) */}\r\n          <h2>Preview</h2>\r\n          <p>\r\n            <b>{textValue.length>0?textValue:\"Enter something in above box to preview it\"}</b>\r\n          </p>\r\n        </div>\r\n      </section>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert (props) {\r\n    function capitalize(str){\r\n        return str[0].toUpperCase()+str.slice(1);\r\n    }\r\n  return (\r\n    props.showAlert&&<div className={`alert alert-${props.showAlert.type} alert-dismissible fade show`} role='alert'>\r\n      <strong>{capitalize(props.showAlert.type)}: {props.showAlert.msg}</strong> \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css'\nimport react, { useState } from 'react'\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert'\n// import { Routes, Route, Link } from 'react-router-dom'\n\nfunction App () {\n  const [mode, setMode] = useState('light')\n  const [modeBtnText, setModeBtnText] = useState('Dark Mode')\n  const [alert, setAlert] = useState(null)\n  const [darkModeColor, setDarkModeColor] = useState('black')\n  const modeChangeHandler = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      setModeBtnText('Light Mode')\n      document.body.style.backgroundColor = '#151515'\n      document.title = 'TextUtil-darkmodeOn'\n      //  below code can br written to make  title blinking but not a good user experience\n      // setInterval(() => {\n      //   document.title=\"TextUtil-Download now\"\n      // }, 1000);\n      // setInterval(() => {\n      //   document.title=\"TextUtil is a good app\"\n      // }, 1500);\n      setDarkModeColor('#151515')\n      showAlert('success', 'Dark Mode On')\n    } else {\n      setMode('light')\n      setModeBtnText('Dark Mode')\n      document.body.style.backgroundColor = 'white'\n      document.title = 'TextUtil-LightMode'\n      setDarkModeColor('black')\n      showAlert('success', 'Light Mode On')\n    }\n  }\n  const showAlert = (type, message) => {\n    setAlert({\n      type: type,\n      msg: message\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000)\n  }\n  const showDarkModeColor = {\n    blueColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#061d3e'\n        setDarkModeColor('#0a4dac')\n      }\n    },\n    redColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#521616'\n        setDarkModeColor('#ba1818')\n      }\n    },\n    greenColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#063606'\n        setDarkModeColor('#0cae0c')\n      }\n    },\n    yellowColor: () => {\n      if (mode === 'dark') {\n        document.body.style.backgroundColor = '#ce9d08'\n        setDarkModeColor('#f4c430')\n      }\n    }\n  }\n\n  return (\n    <>\n      <Navbar\n        websiteTitle={'TextUtiles'}\n        aboutSection={'About'}\n        mode={mode}\n        onModeChange={modeChangeHandler}\n        modeBtnText={modeBtnText}\n        showDarkModeColor={showDarkModeColor}\n      />\n      <Alert showAlert={alert} />\n      <TextForm\n              heading={'Enter Your text below to analyze '}\n              mode={mode}\n              showAlert={showAlert}\n              darkModeColor={darkModeColor}\n            />\n\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}